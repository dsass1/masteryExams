% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/question_wordbank.R
\name{question_wordbank}
\alias{question_wordbank}
\title{Word bank question for learnr tutorials}
\usage{
question_wordbank(
  text,
  ...,
  choices,
  wordbank = NULL,
  box = 6,
  arrange = "random",
  type = "wordbank",
  correct = "Correct!",
  incorrect = "Incorrect",
  loading = c("**Loading:** ", text, "<br/><br/><br/>"),
  submit_button = "Submit Answer",
  try_again_button = "Try Again",
  allow_retry = FALSE,
  random_answer_order = TRUE,
  style = "tutorial_question",
  options = sortable::sortable_options()
)
}
\arguments{
\item{text}{Question or option text}

\item{...}{parameters passed onto learnr answer.}

\item{choices}{a vector of choices that will remain stationary in the left column.}

\item{wordbank}{a vector of choices to be placed into the blanks when providing more options than answers.
If NULL then the wordbank will be set equal to the answer choices.}

\item{box}{a number between 1 and 11, inclusive, indicating the width of the 'choices' box.
The default is 6 which corresponds to 50\% of the page width.}

\item{arrange}{either 'random' or 'ordered'; default is random. Set equal to ordered if
you want the wordbank list to appear alphabetically.}

\item{type}{Type of quiz question. Typically this can be automatically
determined based on the provided answers. Pass \code{"radio"} to indicate that
even though multiple correct answers are specified that inputs which
include only one correct answer are still correct. Pass \code{"checkbox"} to
force the use of checkboxes (as opposed to radio buttons) even though only
once correct answer was provided.}

\item{correct}{For \code{question}, text to print for a correct answer (defaults
to "Correct!"). For \code{answer}, a boolean indicating whether this answer is
correct.}

\item{incorrect}{Text to print for an incorrect answer (defaults to
"Incorrect") when \code{allow_retry} is \code{FALSE}.}

\item{loading}{Loading text to display as a placeholder while the question is
loaded. If not provided, generic "Loading..." or placeholder elements will
be displayed.}

\item{submit_button}{Label for the submit button. Defaults to \code{"Submit Answer"}}

\item{try_again_button}{Label for the try again button. Defaults to \code{"Submit Answer"}}

\item{allow_retry}{Allow retry for incorrect answers. Defaults to \code{FALSE}.}

\item{random_answer_order}{Display answers in a random order.}

\item{style}{can change display of question to "notes" or "exam"}

\item{options}{Extra options to be stored in the question object. This is
useful when using custom question types. See \code{\link[sortable:question_rank]{sortable::question_rank()}}
for an example question implementation that uses the \code{options} parameter.}
}
\value{
A custom \code{learnr} question, with \code{type = wordbank}.
}
\description{
The following function was modified from the sortable package, available at
https://github.com/rstudio/sortable and a solution thread by "stefan's on Jun 01, 2022".
Many thanks to the sortable author who developed tools to drag and drop objects in rank order.
This extends the "question_rank" option so that you can drag any option from the
word bank into the answer blanks.
}
\details{
Add interactive word bank tasks to your \code{learnr} tutorials.  The student can
drag-and-drop the answer options from the word bank to match the corresponding
options.

The choices should be a set of options that the word bank choices will
match to. The choices should be of equal length to the answers.

The answer should contain the set of solutions that match the choices. The first
answer much match the first choice and so forth.

The word bank should be a set of options for the user to choose from to
drag and drop into the blanks. If can be shorter or longer than then number
of blanks but must include all unique answer options. If no word bank is
provided it will be set equal to the answer options.
}
\examples{
question_wordbank(
  "Drag the numbers to match the corresponding letter's position in the alphabet.",
  choices = c("C", "B", "A", "D"),
  learnr::answer(c("3", "2", "1", "4"), correct = TRUE),
  allow_retry = TRUE
)

}
